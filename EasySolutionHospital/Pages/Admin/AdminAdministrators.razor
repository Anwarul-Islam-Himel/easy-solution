@page "/admin-administrators"

<MudTable Items="Administrators" Loading="isLoading" T="AdministratorsViewModel" Dense="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Administrators</MudText>
        <MudButton Class="ml-2" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AddCircleOutline" OnClick="OpenAddCDialogModal">Add Administrator</MudButton>
        <MudSpacer />
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        <col />
        <col />
        <col />
        <col />
        <col style="width:50px;" />
    </ColGroup>
    <HeaderContent>
        <MudTd><MudTableSortLabel SortBy="new Func<AdministratorsViewModel, object>(x => x.FirstName)">First Name</MudTableSortLabel></MudTd>
        <MudTd><MudTableSortLabel SortBy="new Func<AdministratorsViewModel, object>(x => x.LastName)">Last Name</MudTableSortLabel></MudTd>
        <MudTd><MudTableSortLabel SortBy="new Func<AdministratorsViewModel, object>(x => x.Email)">Email</MudTableSortLabel></MudTd>
        <MudTd><MudTableSortLabel SortBy="new Func<AdministratorsViewModel, object>(x => x.Phone)">Phone Number</MudTableSortLabel></MudTd>
        <MudTd><MudTableSortLabel SortBy="new Func<AdministratorsViewModel, object>(x => x.Address)">Address</MudTableSortLabel></MudTd>
        <MudTd><MudTableSortLabel SortBy="new Func<AdministratorsViewModel, object>(x => x.DateOfBirth)">Date Of Birth</MudTableSortLabel></MudTd>
        <MudTd>Action</MudTd>
    </HeaderContent>
    <NoRecordsContent>
        <MudText Typo="Typo.h5" Class="mud-text-secondary mt-16 mb-16">No Administrators</MudText>
    </NoRecordsContent>
    <RowTemplate>
        <MudTd>@context.FirstName</MudTd>
        <MudTd>@context.LastName</MudTd>
        <MudTd>@context.Email</MudTd>
        <MudTd>@context.Phone</MudTd>
        <MudTd>@context.Address</MudTd>
        <MudTd>@context.DateOfBirth.ToString("MMMM dd, yyyy")</MudTd>
        <MudTd>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem Icon="@Icons.Material.Filled.Edit" OnClick="()=>Edit(context)">Edit</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.Delete" OnClick="()=>Delete(context)">Delete</MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Rows Per Page" />
    </PagerContent>
</MudTable>

@code {
    public List<AdministratorsViewModel> Administrators { get; set; } = new();
    private bool isLoading { get; set; } = true;

    private DialogOptions _dialogOption = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true, CloseButton = true };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Administrators = await _httpService.Get<List<AdministratorsViewModel>>($"/api/Admin");
        }
        catch
        {
            Administrators = new List<AdministratorsViewModel>();
        }
        finally
        {
            isLoading = false;
        }
    }


    private async Task OpenAddCDialogModal()
    {
        try
        {
            var dialog = _dialogService.Show<AdministratorFormDialog>("New Administrator", _dialogOption);
            var result = await dialog.Result;
            if (!result.Cancelled)
            {
                var model = result.Data as AdministratorsViewModel;
                var response = await _httpService.Post<Unit>("/api/Admin", model);
                if (response.IsSuccess)
                {
                    model.UserId = response.ResponseId;
                    Administrators.Add(model);
                    _snakBar.Add("Successfully addded Administrator!", Severity.Success);
                }
                else
                {
                    _snakBar.Add(response.Message, Severity.Error);
                }
            }
        }
        catch(Exception ex)
        {
            _snakBar.Add(ex.Message, Severity.Error);
        }
    }


    private async Task Edit(AdministratorsViewModel administrators)
    {
        try
        {
            var model = CloneInstance.Clone<AdministratorsViewModel>(administrators);
            var dialogData = new DialogParameters
                {
                    ["Model"] = model
                };
            var dialog = _dialogService.Show<AdministratorFormDialog>("Update Administrator", dialogData, _dialogOption);
            var result = await dialog.Result;

            if (!result.Cancelled)
            {
                var updateModel = result.Data as AdministratorsViewModel;
            }
        }
        catch(Exception ex)
        {
            _snakBar.Add(ex.Message, Severity.Error);
        }
    }


    private async Task Delete(AdministratorsViewModel model)
    {
        try
        {
            var dialogData = new DialogParameters
                {
                    ["ContentText"] = "Are you sure you want to delete this!",
                    ["SubmitButtonText"] = "Delete"
                };
            var dialog = _dialogService.Show<ConfirmationDialog>("Delete", dialogData);
            var result = await dialog.Result;

            if (!result.Cancelled)
            {
                
            }
        }
        catch (Exception ex)
        {
            _snakBar.Add(ex.Message, Severity.Error);
        }
    }
}
