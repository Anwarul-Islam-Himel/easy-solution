@page "/user-payment"

<MudItem Class="d-flex flex-column mt-4">
    <MudItem Class="d-flex justify-center">
        <h3>Payment</h3>
    </MudItem>
    <MudItem Class="d-flex justify-center mt-4">
        <MudItem Style="width: 400px;">
            <MudTextField Value="paymentCardId" ValueChanged="CardNumberEnter" T="Guid?" Label="Enter Card Id" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
        </MudItem>
    </MudItem>
    <MudItem Class="d-flex justify-center mt-4">
        <MudButton Color="Color.Tertiary" Variant="Variant.Filled" Disabled="@NotValid" OnClick="RechargeProfile"><MudText>Recharge</MudText></MudButton>
    </MudItem>
</MudItem>
<MudItem Class="d-flex justify-center mt-4 mb-5">
    <MudItem Class="d-flex flex-wrap gap-4 justify-center" Style="width: 90%;">
        @foreach (var payment in Payments)
        {
            <MudItem>
                <RechargePaymentCard Card="@payment" />
            </MudItem>
        }
    </MudItem>
</MudItem>

<MudOverlay Visible="isLoading" DarkBackground="true">
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
</MudOverlay>

@code {
    public List<PaymentCardViewModel> Payments { get; set; } = new();
    private Guid? paymentCardId { get; set; } = null;
    private bool NotValid { get; set; } = true;
    private bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var _payments = await _httpService.Get<List<PaymentCardViewModel>>("/api/Admin/payment-card");
            Payments = _payments.Where(x => x.IsUsed == false).ToList();
            NotValid = true;
        }
        catch
        {
            Payments = new List<PaymentCardViewModel>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RechargeProfile()
    {
        try
        {
            var response = await _httpService.Get<Unit>($"/api/Hospital/add-money/{paymentCardId}/{_currentUser.UserId}");
            if (response.IsSuccess)
            {
                var card = Payments.Where(x => x.Id == paymentCardId).FirstOrDefault();
                Payments.Remove(card);
                paymentCardId = null;

                await ((AuthStateProvider)_authStateProvider).SetProfileAmountAync(response.Amount);
                _snakBar.Add("Successfully recharge!", Severity.Success);
            }
            else
            {
                _snakBar.Add(response.Message, Severity.Error);
            }
        }
        catch
        {
            _snakBar.Add("Token isn't valid", Severity.Error);
        }
    }

    private void CardNumberEnter(Guid? id)
    {
        paymentCardId = id;
        string guidId = id.ToString();
        if (guidId.Length == 36)
        {
            NotValid = false;
        }
        else
        {
            NotValid = true;
        }
    }

}
