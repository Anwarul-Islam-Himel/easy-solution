@page "/view-doctor"

<MudItem Class="d-flex justify-center gap-4 mt-5">
    <MudItem Style="width: 400px;">
        <MudTextField Value="_searchDoctor" ValueChanged="SearchDoctor" T="string" Placeholder="Search for doctors" Adornment="Adornment.Start" Variant="Variant.Outlined" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" IconSize="Size.Medium" Class="mt-3 mb-4" MaxLength="40" />
    </MudItem>
</MudItem>
<MudItem Class="d-flex justify-center mt-4 mb-5">
    <MudItem Class="d-flex flex-wrap gap-4 justify-center" Style="width: 90%;">
        @foreach (var doctor in _listDoctors)
        {
            <MudItem Style="width:25%">
                <DoctorCard Doctor="@doctor" />
            </MudItem>
        }
    </MudItem>
</MudItem>

<MudOverlay Visible="isLoading" DarkBackground="true">
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
</MudOverlay>

@code {
    public List<DoctorViewModel> Doctors { get; set; } = new();
    public List<DoctorViewModel> _listDoctors { get; set; } = new();
    public string _searchDoctor { get; set; } = string.Empty;

    private bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Doctors = await _httpService.Get<List<DoctorViewModel>>("/api/Hospital/approved-doctor");
            _listDoctors = Doctors;
        }
        catch
        {
            Doctors = new List<DoctorViewModel>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SearchDoctor(string value)
    {
        _searchDoctor = value;
        try
        {
            _listDoctors = Doctors.Where(x =>
               x.FirstName.Contains(_searchDoctor, StringComparison.OrdinalIgnoreCase)
            || x.Specialization.Contains(_searchDoctor, StringComparison.OrdinalIgnoreCase)
            || x.Degree.Contains(_searchDoctor, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        catch
        {
            
        }
    }
}
