﻿<MudPaper Outlined="true" Class="border-dashed pa-4">
    <MudGrid Justify=Justify.SpaceBetween>
        <MudItem xs="3" Class="d-flex flex-column gap-1">
            <MudText Typo="Typo.body2">@Model.Name</MudText>
            <MudText Typo="Typo.body2">@Model.Email</MudText>
        </MudItem>
        <MudItem xs="6">
            @if (string.IsNullOrEmpty(Model.DoctorName))
            {
                <MudText Color="Color.Primary" Typo="Typo.body1">@Model.HealthPackageName</MudText>
            }
            else
            {
                <MudText Color="Color.Primary" Typo="Typo.body1">Dr. @Model.DoctorName</MudText>
            }
        </MudItem>
        <MudItem xs="2" Class="d-flex flex-column gap-2">
            <MudText Typo="Typo.body1" Style="font-weight: 500;">Appoint Date</MudText>
            <MudText Typo="Typo.body2">@Model.AppointDate.Value.ToString("dd/MM/yyyy")</MudText>
        </MudItem>
        <MudItem xs="1" Class="d-flex align-center">
            @if (!Model.IsPay)
            {
                <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="Pay" Size="Size.Small"><MudText>Pay</MudText></MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Outlined" Color="Color.Success" Disabled Size="Size.Small"><MudText>Paid</MudText></MudButton>
            }
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    [Parameter]
    public AppointmentModel Model { get; set; } = new();

    private async Task Pay()
    {
        try
        {
            var dialogData = new DialogParameters
                {
                    ["ContentText"] = "Are you sure you want to pay!",
                    ["SubmitButtonText"] = "Pay",
                    ["ButtonColor"] = Color.Tertiary
                };
            var dialog = _dialogService.Show<ConfirmationDialog>("Delete", dialogData);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                var response = await _httpService.Get<Unit>($"/api/Hospital/pay-bill/{Model.Id}/{_currentUser.UserId}");
                if (response.IsSuccess)
                {
                    _currentUser.Recharge(response.Amount);
                    await ((AuthStateProvider)_authStateProvider).SetProfileAmountAync(response.Amount);
                    Model.IsPay = true;
                    _snakBar.Add(response.Message, Severity.Success);
                }
                else
                {
                    _snakBar.Add(response.Message, Severity.Error);
                }
            }
        }
        catch(Exception ex)
        {
            _snakBar.Add("Somthing wrong or Insufficient Balance", Severity.Error);
        }
    }
}