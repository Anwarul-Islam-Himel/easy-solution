@using Blazored.SessionStorage;
@using EasySolutionHospital.Shared.ResponseModel;
@using System.Text.Json;
@inject ISessionStorageService _sessionStorage


<MudAppBar Color="Color.Transparent" Fixed="false" Elevation="1">
    <MudImage Style="width: 70px;" Src="Images/logo.png"></MudImage>
    <MudSpacer />
    <AuthorizeView Roles="@(UserRoleType.User.ToString())">
        <Authorized>
            <MudItem Class="d-flex flex-row gap-2 mr-8">
                <MudButton Class="appber-button" OnClick="Home">Home</MudButton>
                <MudButton Class="appber-button" OnClick="Service">Service</MudButton>
                <MudButton Class="appber-button" OnClick="ViewDoctor">Appointment</MudButton>
                <MudButton Class="appber-button" OnClick="Reacharge">Reacharge</MudButton>
            </MudItem>
            <MudMenu AnchorOrigin="Origin.BottomRight" Dense="true">
                <ActivatorContent>
                    <MudAvatar>
                        <MudImage Src="Images/userlogin.png"></MudImage>
                    </MudAvatar>
                </ActivatorContent>
                <ChildContent>
                    <UserCard FullName="@_currentUser.FullName" />
                    <MudDivider Class="mb-2" />
                    <MudListItem Text="My Appointment" Icon="@Icons.Material.Filled.AssignmentInd" OnClick="MyAppointment" />
                    <MudListItem Icon="@Icons.Material.Filled.CurrencyPound">
                        <MudText Color="Color.Tertiary" Typo="Typo.body1">@_currentUser.UserAmount</MudText>
                    </MudListItem>
                    <MudDivider Class="mb-2" />
                    <MudListItem Text="Logout" Icon="@Icons.Material.Filled.Logout" OnClick="Logout" />
                </ChildContent>
            </MudMenu>
        </Authorized>
        <NotAuthorized>
            <MudItem Class="d-flex flex-row gap-2 mr-8">
                <MudButton Class="appber-button" OnClick="Home">Home</MudButton>
                <MudButton Class="appber-button" OnClick="Service">Service</MudButton>
                <MudButton Class="appber-button" OnClick="ViewDoctor">Appointment</MudButton>
            </MudItem>
            <MudMenu AnchorOrigin="Origin.BottomRight" Dense="true">
                <ActivatorContent>
                    <MudAvatar>
                        <MudImage Src="Images/userlogout.png"></MudImage>
                    </MudAvatar>
                </ActivatorContent>
                <ChildContent>
                    <MudListItem Text="My Appointment" Icon="@Icons.Material.Filled.AssignmentInd" OnClick="MyAppointment" />
                    <MudDivider Class="mb-2" />
                    <MudListItem Text="Login" Icon="@Icons.Material.Filled.Login" OnClick="Login" />
                </ChildContent>
            </MudMenu>
        </NotAuthorized>
    </AuthorizeView>
</MudAppBar>

<style>
    .appber-button{
        color: #000;
    }

    .appber-button:hover {
        color: #0096FF;
        background: none !important;
        border-bottom: 2px solid #0096FF;
    }

    .appber-button:focus {
        color: #0096FF;
        background: none !important;
        border-bottom: 2px solid #0096FF;
    }
</style>

@code {
    private bool isAuthorized { get; set; } = false;
    private DialogOptions _dialogOption = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true, NoHeader = true, CloseButton = false };

    protected override async Task OnInitializedAsync()
    {
        var userAmount = await _sessionStorage.GetItemAsync<int>("amount");
        _currentUser.Recharge(userAmount);
    }

    private async Task Login()
    {
        try
        {
            var dialog = _dialogService.Show<AuthDialog>("Easy Solution", _dialogOption);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                var registermodel = result.Data as RegisterModel;
                if (registermodel.FirstName != null)
                {
                    var response = await _httpService.Post<LoginResponse>("/api/Auth/signup", registermodel);
                    if (response != null)
                    {
                        var authValue = JsonSerializer.Serialize<LoginResponse>(response);
                        await ((AuthStateProvider)_authStateProvider).SetStateAsync(authValue);
                        await ((AuthStateProvider)_authStateProvider).SetProfileAmountAync(response.TotalPurchases);
                    }
                }
                else
                {
                    var logInModel = new SigninModel
                        {
                            Email = registermodel.Email,
                            Password = registermodel.Password
                        };

                    var response = await _httpService.Post<LoginResponse>("/api/auth/signin", logInModel);
                    if (response != null)
                    {
                        var authValue = JsonSerializer.Serialize<LoginResponse>(response);
                        await ((AuthStateProvider)_authStateProvider).SetStateAsync(authValue);
                        await ((AuthStateProvider)_authStateProvider).SetProfileAmountAync(response.TotalPurchases);
                        isAuthorized = true;
                        _currentUser.Recharge(response.TotalPurchases);

                        if (response.UserRole == UserRoleType.Admin)
                        {
                            _navigator.NavigateTo("admin");
                        }
                        else if (response.UserRole == UserRoleType.Administrator)
                        {
                            _navigator.NavigateTo("administrator");
                        }
                        else if (response.UserRole == UserRoleType.Doctor)
                        {
                            _navigator.NavigateTo("doctor");
                        }
                    }
                }
            }
        }
        catch
        {
            _snakBar.Add("Email and password doesn't match", Severity.Error);
        }

    }

    private void MyAppointment()
    {
        _navigator.NavigateTo("myAppointment");
    }

    private async Task Logout()
    {
        await((AuthStateProvider)_authStateProvider).ClearStateAsync();
        _navigator.NavigateTo("/");
    }

    private void Home()
    {
        _navigator.NavigateTo("/");
    }

    private void Reacharge()
    {
        _navigator.NavigateTo("/user-payment");
    }

    private void ViewDoctor()
    {
        _navigator.NavigateTo("view-doctor");
    }

    private void Service()
    {
        _navigator.NavigateTo("service");
    }
}
