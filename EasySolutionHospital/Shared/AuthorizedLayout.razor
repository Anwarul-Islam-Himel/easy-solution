@if (!IsLoading)
{
    <MudLayout>
        <AuthorizeView Roles="@(UserRoleType.User.ToString())">
            <Authorized>
                <AppBar />
                <MudMainContent Class="main-content">
                    @ChildContent
                </MudMainContent>
            </Authorized>
            <NotAuthorized>
                <MudAppBar Color="Color.Primary" Class="d-flex" Elevation="1">
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                    <MudSpacer />
                    <MudMenu AnchorOrigin="Origin.BottomRight" Dense="true">
                        <ActivatorContent>
                            <MudAvatar>
                                <MudImage Src="Images/userlogin.png"></MudImage>
                            </MudAvatar>
                        </ActivatorContent>
                        <ChildContent>
                            <UserCard FullName="@_currentUser.FullName" />
                            <MudDivider Class="mb-2" />
                            <MudListItem Text="Logout" Icon="@Icons.Material.Filled.Logout" OnClick="Logout" />
                        </ChildContent>
                    </MudMenu>
                </MudAppBar>
                <MudDrawer @bind-Open="@_drawerOpen">
                    <NavMenu />
                </MudDrawer>
                <MudMainContent Class="px-4 mt-4">
                    @ChildContent
                </MudMainContent>
            </NotAuthorized>
        </AuthorizeView>
    </MudLayout>
}

<style>
    .main-content {
        padding-top: 0px !important;
    }
</style>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    bool _drawerOpen = true;
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var state = await _authStateProvider.GetAuthenticationStateAsync();
            var user = state.User;

            var fullName = user.GetFullName();
            var userId = user.GetUserId();
            var userAmount = user.GetUserAmount();
            var userRole = user.GetUserRole();
            _currentUser.SetState(fullName, userId, userAmount, userRole);
        }
        catch
        {

        }
        finally
        {
            IsLoading = false;
        }
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task Logout()
    {
        await ((AuthStateProvider)_authStateProvider).ClearStateAsync();
        _navigator.NavigateTo("/");
    }

    private void MyAppointment()
    {
        _navigator.NavigateTo("myAppointment");
    }
}
